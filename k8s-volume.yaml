# I think using Helm could be the best option, but right now I don't have enough time to implement that. That's why this
# k8s file seems so chaotic in comparison with something more elegant like Helm. It's something I want to research and
# develop in future projects.
---
# Before continuing with the storage specification: it's possible to use a PodPreset to accomplish the shared volume mount,
# however, it's in alpha state, and to activate this, it's a headache depending on the k8s environment we're working on.
# That's the reason I decided to use the more "traditional" PersistentVolume and PersistentVolumeClaim to share a volume
# across all pods.
#
# The advantage of PodPreset over defined volumes is that isn't necessary to set a storage capacity and claiming then, and
# the way it works is like a template or the more well-known inheritance in object-oriented programming languages, defining
# the local volume on that preset and then being used by all the pods which have been referenced.
---
apiVersion: v1 # https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistent-volumes https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/
kind: PersistentVolume
metadata:
  name: shared-volume
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 100Mi # I'm forced to do this
  accessModes:
    - ReadWriteOnce # ReadOnlyMany seems to be unsupported on HostPath volume plugin
  hostPath:
    path: /path/to/product-warehouse-manager-aos
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: shared-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logging-api
spec:
  selector:
    matchLabels:
      app: logging-api
  replicas: 1
  template:
    metadata:
      labels:
        app: logging-api
    spec:
      containers:
        - name: logging-api
          image: maanuelmm/prism:tini
          args:
            - mock 
            - -d
            - -h
            - 0.0.0.0
            - /app/openapi.yaml
          volumeMounts:
            - mountPath: /app
              name: logging-api-spec
              subPath: app/logging-api/specification
              readOnly: true
          ports:
            - containerPort: 4010
      volumes:
        - name: logging-api-spec
          persistentVolumeClaim:
            claimName: shared-claim
---
apiVersion: v1
kind: Service
metadata:
  name: logging-api
  labels:
    app: logging-api
spec:
  ports:
    - name: "logging-api"
      port: 80
      targetPort: 4010
  selector:
    app: logging-api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: products-api
spec:
  selector:
    matchLabels:
      app: products-api
  replicas: 1
  template:
    metadata:
      labels:
        app: products-api
    spec:
      containers:
        - name: products-api
          image: maanuelmm/prism:tini
          args:
            - mock 
            - -d
            - -h
            - 0.0.0.0
            - /app/openapi.yaml
          volumeMounts:
            - mountPath: /app
              name: products-api-spec
              subPath: app/products-api/specification
              readOnly: true
          ports:
            - containerPort: 4010
      volumes:
        - name: products-api-spec
          persistentVolumeClaim:
            claimName: shared-claim
---
apiVersion: v1
kind: Service
metadata:
  name: products-api
  labels:
    app: products-api
spec:
  ports:
    - name: "products-api"
      port: 80
      targetPort: 4010
  selector:
    app: products-api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders-api
spec:
  selector:
    matchLabels:
      app: orders-api
  replicas: 1
  template:
    metadata:
      labels:
        app: orders-api
    spec:
      containers:
        - name: orders-api
          image: maanuelmm/prism:tini
          args:
            - mock 
            - -d
            - -h
            - 0.0.0.0
            - /app/openapi.json
          volumeMounts:
            - mountPath: /app
              name: orders-api-spec
              subPath: app/orders-api/specification
              readOnly: true
          ports:
            - containerPort: 4010
      volumes:
        - name: orders-api-spec
          persistentVolumeClaim:
            claimName: shared-claim
---
apiVersion: v1
kind: Service
metadata:
  name: orders-api
  labels:
    app: orders-api
spec:
  ports:
    - name: "orders-api"
      port: 80
      targetPort: 4010
  selector:
    app: orders-api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: invoicing-api
spec:
  selector:
    matchLabels:
      app: invoicing-api
  replicas: 1
  template:
    metadata:
      labels:
        app: invoicing-api
    spec:
      containers:
        - name: invoicing-api
          image: maanuelmm/prism:tini
          args:
            - mock 
            - -d
            - -h
            - 0.0.0.0
            - /app/openapi.yaml
          volumeMounts:
            - mountPath: /app
              name: invoicing-api-spec
              subPath: app/invoicing-api/specification
              readOnly: true
          ports:
            - containerPort: 4010
      volumes:
        - name: invoicing-api-spec
          persistentVolumeClaim:
            claimName: shared-claim
---
apiVersion: v1
kind: Service
metadata:
  name: invoicing-api
  labels:
    app: invoicing-api
spec:
  ports:
    - name: "invoicing-api"
      port: 80
      targetPort: 4010
  selector:
    app: invoicing-api
---
apiVersion: apps/v1
kind: Deployment # maybe ReplicaSet is possible, but idk
metadata:
  name: swagger-ui
spec:
  selector:
    matchLabels:
      app: swagger-ui
      #role: master
      #tier: backend
  replicas: 1
  template:
    metadata:
      labels:
        app: swagger-ui
        #role: master
        #tier: backend
    spec:
      containers:
        - name: swagger-ui
          image: swaggerapi/swagger-ui:v3.25.3
          env:
            - name: URLS
              value: '[{url:"/app/logging-api/specification/openapi.yaml",name:"Logging API"},{url:"/app/products-api/specification/openapi.yaml",name:"Products API"},{url:"/app/invoicing-api/specification/openapi.yaml",name:"Invoicing API"},{url:"/app/orders-api/specification/openapi.json",name:"Orders API"}]'
          volumeMounts:
            - mountPath: /usr/share/nginx/html/app
              name: swagger-ui-specs
              subPath: app
              readOnly: true
          ports:
            - containerPort: 8080
      #restartPolicy: OnFailure # seems to be unsupported on Deployment (only Always is the supported value regarding being supported on Pod)
      volumes: # https://kubernetes.io/docs/concepts/storage/volumes/#hostpath
        - name: swagger-ui-specs
          persistentVolumeClaim:
            claimName: shared-claim
          #hostPath:
            # directory location on host
            #path: /home/manuel/Documents/vscode-workspace/product-warehouse-manager-aos/app
            # this field is optional
            #type: Directory
---
apiVersion: v1
kind: Service
metadata:
  name: swagger-ui
  labels:
    app: swagger-ui
spec:
  #type: LoadBalancer # (or even NodePort). More info: http://alesnosek.com/blog/2017/02/14/accessing-kubernetes-pods-from-outside-of-the-cluster/ https://kubernetes.io/docs/tutorials/stateless-application/expose-external-ip-address/ https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/
  ports:
    - name: "http"
      port: 80
      targetPort: 8080
  selector:
    app: swagger-ui
---
# For this deployment nginx-ingress is needed. In my case I'm using microk8s (by Canonical).
apiVersion: networking.k8s.io/v1beta1
kind: Ingress # https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-controllers https://stackoverflow.com/questions/51511547/empty-address-kubernetes-ingress
metadata:
  name: ingress-router
  annotations:
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  rules:
    - host: localhost
      http:
        paths:
          - backend:
              serviceName: swagger-ui
              servicePort: 80
    - host: swagger.localhost # Not the most elegant way to do this, but it's a nginx-ingress limitation of only one host.
      http:                   # Using traefik could be a good way to solve this situation, but time is my enemy right now.
        paths:
          - backend:
              serviceName: swagger-ui
              servicePort: 80
    - host: api.localhost
      http:
        paths:
          - path: /events.*
            backend:
              serviceName: logging-api
              servicePort: 80
          - path: /(Productos|Categorias).*
            backend:
              serviceName: products-api
              servicePort: 80
          - path: /pedidos.*
            backend:
              serviceName: orders-api
              servicePort: 80
          - path: /(Factura|Organizacion).*
            backend:
              serviceName: invoicing-api
              servicePort: 80
